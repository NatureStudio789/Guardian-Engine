#ifndef _GE_GSAMPLER_H_
#define _GE_GSAMPLER_H_
#include "../Buffer/GConstantBuffer.h"

namespace GE
{
	class GUARDIAN_API GSampler : public GApplicable
	{
	public:
		enum Filter
		{
            GE_FILTER_MIN_MAG_MIP_POINT = D3D12_FILTER_MIN_MAG_MIP_POINT,
            GE_FILTER_MIN_MAG_POINT_MIP_LINEAR = D3D12_FILTER_MIN_MAG_POINT_MIP_LINEAR,
            GE_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D12_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT,
            GE_FILTER_MIN_POINT_MAG_MIP_LINEAR = D3D12_FILTER_MIN_POINT_MAG_MIP_LINEAR,
            GE_FILTER_MIN_LINEAR_MAG_MIP_POINT = D3D12_FILTER_MIN_LINEAR_MAG_MIP_POINT,
            GE_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D12_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
            GE_FILTER_MIN_MAG_LINEAR_MIP_POINT = D3D12_FILTER_MIN_MAG_LINEAR_MIP_POINT,
            GE_FILTER_MIN_MAG_MIP_LINEAR = D3D12_FILTER_MIN_MAG_MIP_LINEAR,
            GE_FILTER_ANISOTROPIC = D3D12_FILTER_ANISOTROPIC,
            GE_FILTER_COMPARISON_MIN_MAG_MIP_POINT = D3D12_FILTER_COMPARISON_MIN_MAG_MIP_POINT,
            GE_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = D3D12_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR,
            GE_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D12_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT,
            GE_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = D3D12_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR,
            GE_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT,
            GE_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D12_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
            GE_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = D3D12_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT,
            GE_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = D3D12_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR,
            GE_FILTER_COMPARISON_ANISOTROPIC = D3D12_FILTER_COMPARISON_ANISOTROPIC,
            GE_FILTER_MINIMUM_MIN_MAG_MIP_POINT = D3D12_FILTER_MINIMUM_MIN_MAG_MIP_POINT,
            GE_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = D3D12_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR,
            GE_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D12_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
            GE_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = D3D12_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR,
            GE_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT,
            GE_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D12_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
            GE_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = D3D12_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT,
            GE_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = D3D12_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR,
            GE_FILTER_MINIMUM_ANISOTROPIC = D3D12_FILTER_MINIMUM_ANISOTROPIC,
            GE_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_POINT,
            GE_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = D3D12_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR,
            GE_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT,
            GE_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = D3D12_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR,
            GE_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT,
            GE_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = D3D12_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR,
            GE_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = D3D12_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT,
            GE_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = D3D12_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR,
            GE_FILTER_MAXIMUM_ANISOTROPIC = D3D12_FILTER_MAXIMUM_ANISOTROPIC
		};

		enum AddressMode
		{
            GE_ADDRESS_MODE_WRAP = D3D12_TEXTURE_ADDRESS_MODE_WRAP,
            GE_ADDRESS_MODE_MIRROR = D3D12_TEXTURE_ADDRESS_MODE_MIRROR,
            GE_ADDRESS_MODE_CLAMP = D3D12_TEXTURE_ADDRESS_MODE_CLAMP,
            GE_ADDRESS_MODE_BORDER = D3D12_TEXTURE_ADDRESS_MODE_BORDER,
            GE_ADDRESS_MODE_MIRROR_ONCE = D3D12_TEXTURE_ADDRESS_MODE_MIRROR_ONCE
		};

	public:
		GSampler();
		GSampler(std::shared_ptr<GRootSignature> rootSignature, const Filter& filter, 
			const AddressMode& addressU, const AddressMode& addressV, const AddressMode& addressW, UINT index = 0);
		GSampler(const GSampler& other);
		~GSampler() override;

		void InitializeSampler(std::shared_ptr<GRootSignature> rootSignature, const Filter& filter, 
			const AddressMode& addressU, const AddressMode& addressV, const AddressMode& addressW, UINT index = 0);

		void Apply() override;

	private:
		CD3DX12_CPU_DESCRIPTOR_HANDLE GetSamplerCPUView();
		CD3DX12_GPU_DESCRIPTOR_HANDLE GetSamplerGPUView();

		std::shared_ptr<GRootSignature> SamplerRootSignature;
		UINT SamplerIndex;
	};
}

#endif